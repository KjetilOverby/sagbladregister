// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum UserRole {
    ADMIN
    USER
    LOGIN
    MV_ADMIN
    MT_ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    // role  UserRole @default(LOGIN)
    role UserRole @default(LOGIN)

    accounts      Account[]
    sessions      Session[]
    personal      personal[]
    sawblades     sawblades[]
    Post          Post[]
    bandhistorikk bandhistorikk[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model personal {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    img        String
    name       String
    title      String
    color      String
    font       String
    beholdning Boolean
    user       User      @relation(fields: [userId], references: [id])
    userId     String
    userBlade  sawblades @relation(fields: [id], references: [id])

    @@index([userId])
    @@index([id])
}

model sawblades {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    kunde        String
    type         String
    IdNummer     String   @unique
    createdBy    User     @relation(fields: [createdById], references: [id])
    createdById  String
    userId       String
    creator      String
    creatorImg   String
    deleted      Boolean
    note         String
    side         String
    active       Boolean
    deleteReason String
    produsent    String
    deleter      String
    deleterImg   String
    artikkel     String

    personal      personal[]
    bandhistorikk bandhistorikk[]

    @@index([userId])
    @@index([createdById])
}

model bandhistorikk {
    id              String   @id @default(cuid())
    historikkId     String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    userId          String
    createdBy       User     @relation(fields: [createdById], references: [id])
    service         String
    datoInn         DateTime
    klInn           DateTime @db.Time()
    datoUt          DateTime
    klUt            DateTime @db.Time()
    sagtid          Float
    feilkode        String
    temperatur      Int
    sideklaring     Float
    ampere          Float
    stokkAnt        Int
    anmSag          String
    createdById     String
    creator         String
    creatorImg      String
    anmKS           String
    sgSag           String
    sgKS            String
    handling        String
    side            String
    bladType        String
    datoSrv         DateTime
    activePost      Boolean
    antRep          Int
    antTannslipp    Int
    bladeRelationId String
    alt             String
    creator2        String
    creatorImg2     String
    creator3        String
    creatorImg3     String

    bladedata sawblades @relation(fields: [historikkId], references: [id])

    @@index([historikkId])
    @@index([createdById])
}
